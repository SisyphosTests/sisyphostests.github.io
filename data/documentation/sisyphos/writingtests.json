{"primaryContentSections":[{"kind":"content","content":[{"anchor":"The-basic-building-block-Pages","level":2,"type":"heading","text":"The basic building block: Pages"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Pages are the basic building blocks in Sisyphos. A "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Sisyphos\/documentation\/Sisyphos\/Page"},{"type":"text","text":" describes the user interface which you expect in your tests."},{"type":"text","text":" "},{"type":"text","text":"You describe pages with a syntax that is very familiar if you are used to SwiftUI:"}]},{"type":"codeListing","syntax":"swift","code":["struct ExamplePage: Page {","    var body: PageDescription {","        NavigationBar {","            StaticText(\"Title in the Nav Bar\")","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This page describes that you are expecting a screen with a navigation bar. Inside the Navigation bar, there should be"},{"type":"text","text":" "},{"type":"text","text":"the title "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Title in the Nav Bar"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The name of the page elements are the capitalized versions of"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/xctest\/xcuielement\/elementtype"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Sisyphos doesn’t implement all element types which are available for "},{"type":"codeVoice","code":"XCUIElements"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Instead, it only implements a subset of elements."},{"type":"text","text":" "},{"type":"text","text":"You can check the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Sisyphos\/documentation\/Sisyphos\/PageElement"},{"type":"text","text":" protocol to see all elements which are available in Sisyphos."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"After you have defined your page, you usually want to use it in your tests to interact with its elements"},{"type":"text","text":" "},{"type":"text","text":"and to validate that your app behaves correctly and displays the correct information."},{"type":"text","text":" "},{"type":"text","text":"There are two ways to check if a page exists:"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Calling its "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Sisyphos\/documentation\/Sisyphos\/Page\/waitForExistence(timeout:file:line:)"},{"type":"text","text":" method."},{"type":"text","text":" "},{"type":"text","text":"This method will check if all the page’s elements exist and are in the expected state."},{"type":"text","text":" "},{"type":"text","text":"If not, it will wait until the timeout is reached and periodically check if the page exists."},{"type":"text","text":" "},{"type":"text","text":"As soon as page exists, the method returns."},{"type":"text","text":" "},{"type":"text","text":"This means that your tests will only take as long as needed to have all the elements visible"},{"type":"text","text":" "},{"type":"text","text":"and will execute as fast as possible."},{"type":"text","text":" "},{"type":"text","text":"If the page doesn’t exist after the timeout, then this method will automatically fail the currently running test."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Using its "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Sisyphos\/documentation\/Sisyphos\/Page\/exists()"},{"type":"text","text":" method."},{"type":"text","text":" "},{"type":"text","text":"This method will check if the page exists and return immediately with the results."},{"type":"text","text":" "},{"type":"text","text":"If the page doesn’t exist, it will tell you in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Sisyphos\/documentation\/Sisyphos\/PageExistsResults\/missingElements"},{"type":"text","text":" property which elements"},{"type":"text","text":" "},{"type":"text","text":"weren’t found."},{"type":"text","text":" "},{"type":"text","text":"A non-existing page will not automatically fail your test."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In a test, where you want to validate that a page exists and all its elements are in the expected state,"},{"type":"text","text":" "},{"type":"text","text":"you should usually use its "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Sisyphos\/documentation\/Sisyphos\/Page\/waitForExistence(timeout:file:line:)"},{"type":"text","text":" method."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to interact with a page’s element, then you need to put it in a property on the page."},{"type":"text","text":" "},{"type":"text","text":"E.g. if you want to tap on a button which is in the nav bar:"}]},{"type":"codeListing","syntax":"swift","code":["struct ExamplePage: Page {","    ","    let buttonInNavBar = Button()","    ","    var body: PageDescription {","        NavigationBar {","            StaticText(\"Title in the Nav Bar\")","            buttonInNavBar","        }","    }","}","","final class Tests: XCTestCase {","    func testApp() {","        let app = XCUIApplication()","        app.launch()","        ","        let page = ExamplePage()","        page.waitForExistence()","        page.buttonInNavBar.tap()","    }","}"]},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Always call a page’s "},{"type":"codeVoice","code":"waitForExistence()"},{"type":"text","text":" method before you interact with its elements."}]}],"type":"aside","name":"Important"},{"anchor":"Pages-can-describe-other-apps-than-the-target-app","level":2,"type":"heading","text":"Pages can describe other apps than the target app"},{"type":"paragraph","inlineContent":[{"type":"text","text":"By default, a page describes screens of the application which is configured as the tests’ target application."},{"type":"text","text":" "},{"type":"text","text":"But you can also interact with screens of other applications, e.g. the settings app in iOS."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All pages need to provide an "},{"type":"codeVoice","code":"application"},{"type":"text","text":" parameter which is the bundle identifier of the app which should be tested."},{"type":"text","text":" "},{"type":"text","text":"By default, this bundle identifier is empty, therefore Sisyphos will use the application which is configured as the"},{"type":"text","text":" "},{"type":"text","text":"tests’ target application in the tests target configuration."},{"type":"text","text":" "},{"type":"text","text":"If you set this to a bundle identifier of another application, then Sisyphos will use this bundle identifier and check"},{"type":"text","text":" "},{"type":"text","text":"the elements of the app with this bundle identifier."}]},{"type":"codeListing","syntax":null,"code":["struct Preferences: Page {","","    let application = \"com.apple.Preferences\"","    ","    var body: PageDescription {","        NavigationBar {}","    }","}"]},{"anchor":"General-principles-for-building-pages","level":2,"type":"heading","text":"General principles for building pages"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that you learned what a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Page"}]},{"type":"text","text":" is in Sisyphos, here are some of the basic principles which will help you to work"},{"type":"text","text":" "},{"type":"text","text":"with pages."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Why do we call it "},{"type":"emphasis","inlineContent":[{"type":"text","text":"pages"}]},{"type":"text","text":"? We don’t test websites. Or even books. Shouldn’t we call this "},{"type":"emphasis","inlineContent":[{"type":"text","text":"screens"}]},{"type":"text","text":"?"},{"type":"text","text":" "},{"type":"text","text":"The name "},{"type":"codeVoice","code":"Page"},{"type":"text","text":" is influenced by the "},{"type":"reference","isActive":true,"identifier":"https:\/\/martinfowler.com\/bliki\/PageObject.html"},{"type":"text","text":"."}]}],"type":"aside","name":"Info"},{"type":"paragraph","inlineContent":[{"type":"text","text":"First of all, when describing pages, you should describe the page like it’s visible for the user."},{"type":"text","text":" "},{"type":"text","text":"Start from the upper left and go to the lower right."}]},{"anchor":"You-can-omit-elements-in-which-you-are-not-interested","level":3,"type":"heading","text":"You can omit elements in which you are not interested"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You don’t need to add every element which is visible on the screen."},{"type":"text","text":" "},{"type":"text","text":"It’s perfectly fine to omit elements."},{"type":"text","text":" "},{"type":"text","text":"You only need to add the elements which are relevant and which should make a test fail if they are not present or"},{"type":"text","text":" "},{"type":"text","text":"if they have the wrong contents."}]},{"anchor":"The-order-and-hierarchy-of-elements-is-important","level":3,"type":"heading","text":"The order and hierarchy of elements is important"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Although you can skip elements, the relative order of elements which are expected in your page is important."},{"type":"text","text":" "},{"type":"text","text":"For example, if you have the following screen:"}]},{"type":"codeListing","syntax":"swift","code":["struct ExamplePage: Page {","    var body: PageDescription {","        StaticText(\"First Name\")","        TextField()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this example, it’s important that the text field actually appears after the static text - which means that the text"},{"type":"text","text":" "},{"type":"text","text":"should be above the text field. If the text is below the text field, then the tests will fail because the page will"},{"type":"text","text":" "},{"type":"text","text":"never match with the screen contents."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can utilize this to match elements which would be hard to match otherwise. For example, in the following page the"},{"type":"text","text":" "},{"type":"text","text":"text fields wouldn’t be distinguishable as they neither have an accessibility identifier nor any other attribute."}]},{"type":"codeListing","syntax":"swift","code":["struct ExamplePage: Page {","    let firstNameField = TextField()","    ","    let lastNameField = TextField()","    ","    var body: PageDescription {","        StaticText(\"First Name\")","        firstNameField","        StaticText(\"Last Name\")","        lastNameField","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In a regular XCUITest without Sisyphos, you would need to go via the text fields’ indices which will make the test very"},{"type":"text","text":" "},{"type":"text","text":"fragile if the order of elements change."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With Sisyphos, you have an easy way to describe the relations between the position of elements."}]},{"anchor":"You-dont-need-to-describe-all-ancestors-of-an-element","level":3,"type":"heading","text":"You don’t need to describe all ancestors of an element"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The hierarchy of elements can be deeply nested. It’s not uncommon for elements to have 5-10 ancestors."},{"type":"text","text":" "},{"type":"text","text":"In Sisyphos, you can omit arbitrary ancestors and the element matching will work nevertheless."},{"type":"text","text":" "},{"type":"text","text":"This makes the tests very maintainable as usually the ancestors of an element change quite a lot, but the element and"},{"type":"text","text":" "},{"type":"text","text":"its contents are stable."}]},{"anchor":"Code-Generation","level":2,"type":"heading","text":"Code Generation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of building the descriptions of the screens yourself, Sisyphos can automatically generate the code for you."},{"type":"text","text":" "},{"type":"text","text":"Call "},{"type":"codeVoice","code":"startCodeGeneration()"},{"type":"text","text":" inside of an "},{"type":"codeVoice","code":"XCTestCase"},{"type":"text","text":". Sisyphos will then record any new screen"},{"type":"text","text":" "},{"type":"text","text":"which will appear and add the screens’ source code at the end of the file while you manually browse through the app."}]},{"type":"codeListing","syntax":"swift","code":["import XCTest","import Sisyphos","","class UITests: XCTestCase {","","    func testNew() {","        let app = XCUIApplication()","        app.launch()","        ","        startCodeGeneration()","    }","","}"]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"codegeneration"}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The Code generation will add the generated code at the end of the file from which you call"},{"type":"text","text":" "},{"type":"codeVoice","code":"startCodeGeneration()"},{"type":"text","text":". This will only work when running the code generation on a simulator."},{"type":"text","text":" "},{"type":"text","text":"When running on a real device, the code generation cannot access the source file."}]}],"type":"aside","name":"Info"},{"anchor":"Extracting-Test-Data","level":2,"type":"heading","text":"Extracting Test Data"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s best practices to expect screen contents upfront and to not react dynamically on the things that are"},{"type":"text","text":" "},{"type":"text","text":"happening inside your app. However, sometimes you need to extract data which you cannot predict upfront because"},{"type":"text","text":" "},{"type":"text","text":"it’s created dynamically as a side effect or your actual test, and you need to use the data for further steps or"},{"type":"text","text":" "},{"type":"text","text":"validations in your tests."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For situations like this, Sisyphos provides the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Sisyphos\/documentation\/Sisyphos\/TestData"},{"type":"text","text":" property wrapper."},{"type":"text","text":" "},{"type":"text","text":"You can use it to extract contents out of static texts or the labels of elements."},{"type":"text","text":" "},{"type":"text","text":"Simply use it on a string property on your page."},{"type":"text","text":" "},{"type":"text","text":"Then, wherever you want to extract the text, use the property in a string interpolation."}]},{"type":"codeListing","syntax":"swift","code":["struct ExamplePage: Page {","    ","    @TestData var invoiceNumber: String","    ","    struct PurchaseLastStep: Page {","        var body: PageDescription {","            NavigationBar {","                StaticText(\"Success\")","            }","            ","            StaticText(\"Invoice \\(invoiceNumber)\")","            StaticText(\"Thank you for your purchase!\")","        }","    }","}","","final class PurchaseTests: XCTestCase {","    func testPurchase() {","        \/\/ ....","        let page = PurchaseLastStep()","        page.waitForExistence()","        ","        \/\/ The invoiceNumber property is now available and you can use it in the test.","        \/\/ It will contain the invoice number which was extracted from the page.","        print(page.invoiceNumber)","    }","}"]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/sisyphos\/writingtests"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Sisyphos\/documentation\/Sisyphos\/WritingTests","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A short introduction into how to describe user interfaces and how to write tests with Sisyphos."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Writing Tests with Sisyphos","role":"article","modules":[{"name":"Sisyphos"}]},"hierarchy":{"paths":[["doc:\/\/Sisyphos\/documentation\/Sisyphos"]]},"seeAlsoSections":[{"title":"Essentials","identifiers":["doc:\/\/Sisyphos\/documentation\/Sisyphos\/Integration","doc:\/\/Sisyphos\/documentation\/Sisyphos\/Interruptions"],"generated":true}],"references":{"doc://Sisyphos/documentation/Sisyphos/Page/exists()":{"role":"symbol","title":"exists()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"exists"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"PageExistsResults","preciseIdentifier":"s:8Sisyphos17PageExistsResultsV"}],"abstract":[{"type":"text","text":"Checks if the given page exists, that means it’s currently visible on the screen as described in the page"},{"type":"text","text":" "},{"type":"text","text":"description."}],"identifier":"doc:\/\/Sisyphos\/documentation\/Sisyphos\/Page\/exists()","kind":"symbol","type":"topic","url":"\/documentation\/sisyphos\/page\/exists()"},"doc://Sisyphos/documentation/Sisyphos/PageElement":{"role":"symbol","title":"PageElement","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PageElement"}],"abstract":[],"identifier":"doc:\/\/Sisyphos\/documentation\/Sisyphos\/PageElement","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PageElement"}],"url":"\/documentation\/sisyphos\/pageelement"},"codegeneration":{"alt":null,"type":"image","identifier":"codegeneration","variants":[{"url":"\/images\/codegeneration.gif","traits":["1x","light"]}]},"doc://Sisyphos/documentation/Sisyphos/TestData":{"role":"symbol","title":"TestData","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TestData"}],"abstract":[],"identifier":"doc:\/\/Sisyphos\/documentation\/Sisyphos\/TestData","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TestData"}],"url":"\/documentation\/sisyphos\/testdata"},"doc://Sisyphos/documentation/Sisyphos/PageExistsResults/missingElements":{"role":"symbol","title":"missingElements","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"missingElements"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"PageElement","preciseIdentifier":"s:8Sisyphos11PageElementP"},{"kind":"text","text":"]"}],"abstract":[{"type":"text","text":"The page’s elements that were missing when the check was run. Empty if the page exists."}],"identifier":"doc:\/\/Sisyphos\/documentation\/Sisyphos\/PageExistsResults\/missingElements","kind":"symbol","type":"topic","url":"\/documentation\/sisyphos\/pageexistsresults\/missingelements"},"https://developer.apple.com/documentation/xctest/xcuielement/elementtype":{"title":"XCUIElement.ElementType","titleInlineContent":[{"type":"text","text":"XCUIElement.ElementType"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/xctest\/xcuielement\/elementtype","url":"https:\/\/developer.apple.com\/documentation\/xctest\/xcuielement\/elementtype"},"https://martinfowler.com/bliki/PageObject.html":{"title":"page object pattern","titleInlineContent":[{"type":"text","text":"page object pattern"}],"type":"link","identifier":"https:\/\/martinfowler.com\/bliki\/PageObject.html","url":"https:\/\/martinfowler.com\/bliki\/PageObject.html"},"doc://Sisyphos/documentation/Sisyphos/Integration":{"role":"article","title":"Integrating Sisyphos in your tests","abstract":[{"type":"text","text":"Learn how to add Sisyphos to your app’s UI tests."}],"identifier":"doc:\/\/Sisyphos\/documentation\/Sisyphos\/Integration","kind":"article","type":"topic","url":"\/documentation\/sisyphos\/integration"},"doc://Sisyphos/documentation/Sisyphos/Page":{"role":"symbol","title":"Page","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Page"}],"abstract":[{"type":"text","text":"A page describes a screen that is expected to appear in the tests. It’s the basic building block for writing tests"},{"type":"text","text":" "},{"type":"text","text":"with Sisyphos."}],"identifier":"doc:\/\/Sisyphos\/documentation\/Sisyphos\/Page","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Page"}],"url":"\/documentation\/sisyphos\/page"},"doc://Sisyphos/documentation/Sisyphos/Page/waitForExistence(timeout:file:line:)":{"role":"symbol","title":"waitForExistence(timeout:file:line:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"waitForExistence"},{"kind":"text","text":"("},{"kind":"externalParam","text":"timeout"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"CFTimeInterval","preciseIdentifier":"c:@T@CFTimeInterval"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Checks if the given page exists, that means it’s currently visible on the screen as described in the page"},{"type":"text","text":" "},{"type":"text","text":"description."}],"identifier":"doc:\/\/Sisyphos\/documentation\/Sisyphos\/Page\/waitForExistence(timeout:file:line:)","kind":"symbol","type":"topic","url":"\/documentation\/sisyphos\/page\/waitforexistence(timeout:file:line:)"},"doc://Sisyphos/documentation/Sisyphos":{"role":"collection","title":"Sisyphos","abstract":[{"type":"text","text":"Declarative end-to-end and UI testing for iOS and macOS"}],"identifier":"doc:\/\/Sisyphos\/documentation\/Sisyphos","kind":"symbol","type":"topic","url":"\/documentation\/sisyphos"},"doc://Sisyphos/documentation/Sisyphos/Interruptions":{"role":"article","title":"Handling Interruptions","abstract":[{"type":"text","text":"Learn how to handle interruptions that can happen unexpectedly or at any time, such as alerts and permission dialogues."}],"identifier":"doc:\/\/Sisyphos\/documentation\/Sisyphos\/Interruptions","kind":"article","type":"topic","url":"\/documentation\/sisyphos\/interruptions"}}}